<div class="fixed bottom-6 right-6 z-50">
    <button id="chatbot-toggle" class="bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg transition">
      <i class="fas fa-robot"></i> <!-- Uses Font Awesome from your CDN -->
    </button>
    
    <div id="chatbot-container" class="hidden bg-gray-800 rounded-lg shadow-xl w-70 h-86 md:w-85 md:h-100 flex flex-col border border-gray-700 mt-2">
      <div class="p-4 border-b border-gray-700 bg-blue-600 text-white rounded-t-lg">
        <h3 class="font-bold">CampQuest AI</h3>
        <p class="text-xs opacity-80">Ask me about camping adventures!</p>
      </div>
      <div id="chatbot-messages" class="flex-1 p-4 overflow-y-auto text-gray-200">
        <!-- Welcome message -->
        <div class="mb-4">
          <div class="inline-block bg-gray-700 text-gray-200 px-4 py-2 rounded-lg max-w-xs">
            Hi! I'm your CampQuest assistant. How can I help with your camping adventure today?
          </div>
        </div>
      </div>
      <div class="p-4 border-t border-gray-700">
        <input 
          type="text" 
          id="chatbot-input" 
          placeholder="Ask about camping..." 
          class="w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
        <button id="chatbot-send" class="mt-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg w-full">
          Send <i class="fas fa-paper-plane ml-1"></i>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Chatbot JavaScript -->
  <script>
    // Session Management
    let chatSessionId = localStorage.getItem('campquest_chat_session');
    if (!chatSessionId) {
      // Generate a unique session ID combining timestamp and random string
      chatSessionId = Date.now().toString() + '-' + Math.random().toString(36).substr(2, 9);
      localStorage.setItem('campquest_chat_session', chatSessionId);
    }

    // Toggle Chatbot Visibility
    document.getElementById('chatbot-toggle').addEventListener('click', () => {
      const container = document.getElementById('chatbot-container');
      container.classList.toggle('hidden');
      
      // Auto-focus input when opening
      if (!container.classList.contains('hidden')) {
        document.getElementById('chatbot-input').focus();
      }
    });
  
    // Send Message to Backend
    document.getElementById('chatbot-send').addEventListener('click', async () => {
      const input = document.getElementById('chatbot-input');
      const messagesDiv = document.getElementById('chatbot-messages');
      const userMessage = input.value.trim();
  
      if (!userMessage) return;
  
      // Add user message to chat
      messagesDiv.innerHTML += `
        <div class="mb-4 text-right">
          <div class="inline-block bg-blue-100 text-blue-900 px-4 py-2 rounded-lg max-w-xs">
            ${userMessage}
          </div>
        </div>
      `;
      input.value = '';
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
  
      // Show typing indicator
      const typingIndicator = document.createElement('div');
      typingIndicator.innerHTML = `
        <div class="mb-4">
          <div class="inline-block bg-gray-700 text-gray-200 px-4 py-2 rounded-lg max-w-xs">
            <div class="flex space-x-1">
              <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
              <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-100"></div>
              <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-200"></div>
            </div>
          </div>
        </div>
      `;
      messagesDiv.appendChild(typingIndicator);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
  
      // Fetch AI response
      try {
        const response = await fetch('/chatbot', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest' // Useful for Express to identify AJAX
          },
          body: JSON.stringify({ 
            message: userMessage,
            sessionId: chatSessionId // Include the persistent session ID
          })
        });
        
        // Remove typing indicator
        typingIndicator.remove();
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Network response was not ok');
        }
        
        const data = await response.json();
  
        // Add bot response
        messagesDiv.innerHTML += `
          <div class="mb-4">
            <div class="inline-block bg-gray-700 text-gray-200 px-4 py-2 rounded-lg max-w-xs">
              ${data.reply}
            </div>
          </div>
        `;
      } catch (err) {
        // Remove typing indicator
        typingIndicator.remove();
        
        console.error('Chatbot error:', err);
        messagesDiv.innerHTML += `
          <div class="mb-4">
            <div class="inline-block bg-red-700 text-white px-4 py-2 rounded-lg max-w-xs">
              ${err.message || 'Sorry, I\'m having trouble responding. Please try again.'}
            </div>
          </div>
        `;
      } finally {
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
      }
    });
  
    // Send message on Enter key
    document.getElementById('chatbot-input').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        document.getElementById('chatbot-send').click();
      }
    });

    // Optional: Clear chat session when the page is about to be unloaded
    window.addEventListener('beforeunload', () => {
      // You might want to keep the session or clear it based on your requirements
      // localStorage.removeItem('campquest_chat_session'); // Uncomment if you want to clear
    });
  </script>